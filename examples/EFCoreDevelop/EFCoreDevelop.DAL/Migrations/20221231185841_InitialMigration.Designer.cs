// <auto-generated />
using System;
using Develop.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFCoreDevelop.DAL.Migrations
{
    [DbContext(typeof(DbDevelopContext))]
    [Migration("20221231185841_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppFuncGroup", b =>
                {
                    b.Property<int>("AppsAppId")
                        .HasColumnType("integer");

                    b.Property<int>("FuncGroupsFuncGroupId")
                        .HasColumnType("integer");

                    b.HasKey("AppsAppId", "FuncGroupsFuncGroupId");

                    b.HasIndex("FuncGroupsFuncGroupId");

                    b.ToTable("FuncGroupsByApps", "dvp");

                    b.HasData(
                        new
                        {
                            AppsAppId = 1,
                            FuncGroupsFuncGroupId = 1
                        },
                        new
                        {
                            AppsAppId = 1,
                            FuncGroupsFuncGroupId = 2
                        });
                });

            modelBuilder.Entity("Develop.Entities.COM.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users", "com");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Desc = "Default admin account",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Login = "Admin",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Develop.Entities.DVP.AOListener", b =>
                {
                    b.Property<int>("AOListenerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AOListenerId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("GenericObjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AOListenerId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("GenericObjectId");

                    b.ToTable("AOListeners", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.App", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("ProjectId");

                    b.ToTable("Apps", "dvp");

                    b.HasData(
                        new
                        {
                            AppId = 1,
                            Desc = "Застосунок для обліку та розробки застосунків на основі QBCore",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Develop",
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("Develop.Entities.DVP.AppObject", b =>
                {
                    b.Property<int>("AppObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppObjectId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("FuncGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppObjectId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("FuncGroupId");

                    b.ToTable("AppObjects", "dvp");

                    b.HasData(
                        new
                        {
                            AppObjectId = 1,
                            FuncGroupId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Projects"
                        },
                        new
                        {
                            AppObjectId = 2,
                            FuncGroupId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apps"
                        },
                        new
                        {
                            AppObjectId = 3,
                            FuncGroupId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FuncGroups"
                        },
                        new
                        {
                            AppObjectId = 4,
                            FuncGroupId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AppObjects"
                        });
                });

            modelBuilder.Entity("Develop.Entities.DVP.CDSCondition", b =>
                {
                    b.Property<int>("CDSConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CDSConditionId"));

                    b.Property<int>("CDSNodeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CDSConditionId");

                    b.HasIndex("CDSNodeId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.ToTable("CDSConditions", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.CDSNode", b =>
                {
                    b.Property<int>("CDSNodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CDSNodeId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("GenericObjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CDSNodeId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("GenericObjectId");

                    b.HasIndex("ParentId");

                    b.ToTable("CDSNodes", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.DataEntry", b =>
                {
                    b.Property<int>("DataEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DataEntryId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("GenericObjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DataEntryId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("GenericObjectId");

                    b.ToTable("DataEntries", "dvp");

                    b.HasData(
                        new
                        {
                            DataEntryId = 1,
                            GenericObjectId = 1,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProjectId"
                        },
                        new
                        {
                            DataEntryId = 2,
                            GenericObjectId = 1,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Name"
                        },
                        new
                        {
                            DataEntryId = 3,
                            GenericObjectId = 1,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Desc"
                        },
                        new
                        {
                            DataEntryId = 4,
                            GenericObjectId = 1,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Inserted"
                        },
                        new
                        {
                            DataEntryId = 5,
                            GenericObjectId = 1,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Updated"
                        },
                        new
                        {
                            DataEntryId = 6,
                            GenericObjectId = 1,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deleted"
                        },
                        new
                        {
                            DataEntryId = 8,
                            GenericObjectId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AppId"
                        },
                        new
                        {
                            DataEntryId = 9,
                            GenericObjectId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Name"
                        },
                        new
                        {
                            DataEntryId = 10,
                            GenericObjectId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Desc"
                        },
                        new
                        {
                            DataEntryId = 11,
                            GenericObjectId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Inserted"
                        },
                        new
                        {
                            DataEntryId = 12,
                            GenericObjectId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Updated"
                        },
                        new
                        {
                            DataEntryId = 13,
                            GenericObjectId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deleted"
                        },
                        new
                        {
                            DataEntryId = 7,
                            GenericObjectId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProjectId"
                        });
                });

            modelBuilder.Entity("Develop.Entities.DVP.DataEntryTranslation", b =>
                {
                    b.Property<int>("DataEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("RefId");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<string>("RefKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DataEntryId", "LanguageId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("LanguageId");

                    b.ToTable("DataEntriesByTranslations", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.FuncGroup", b =>
                {
                    b.Property<int>("FuncGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FuncGroupId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FuncGroupId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("ProjectId");

                    b.ToTable("FuncGroups", "dvp");

                    b.HasData(
                        new
                        {
                            FuncGroupId = 1,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "COM",
                            ProjectId = 1
                        },
                        new
                        {
                            FuncGroupId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DVP",
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("Develop.Entities.DVP.GenericObject", b =>
                {
                    b.Property<int>("GenericObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenericObjectId"));

                    b.Property<int?>("AppObjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("FuncGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GenericObjectId");

                    b.HasIndex("AppObjectId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("FuncGroupId");

                    b.ToTable("GenericObjects", "dvp");

                    b.HasData(
                        new
                        {
                            GenericObjectId = 1,
                            AppObjectId = 1,
                            FuncGroupId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Projects"
                        },
                        new
                        {
                            GenericObjectId = 2,
                            AppObjectId = 2,
                            FuncGroupId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apps"
                        },
                        new
                        {
                            GenericObjectId = 3,
                            AppObjectId = 3,
                            FuncGroupId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FuncGroups"
                        },
                        new
                        {
                            GenericObjectId = 4,
                            AppObjectId = 4,
                            FuncGroupId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AppObjects"
                        });
                });

            modelBuilder.Entity("Develop.Entities.DVP.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LanguageId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LanguageId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Languages", "dvp");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "en"
                        },
                        new
                        {
                            LanguageId = 2,
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "uk"
                        });
                });

            modelBuilder.Entity("Develop.Entities.DVP.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProjectId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Projects", "dvp");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Desc = "",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "General"
                        });
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBAggregation", b =>
                {
                    b.Property<int>("QBAggregationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QBAggregationId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("QueryBuilderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QBAggregationId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("QueryBuilderId");

                    b.ToTable("QBAggregations", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBColumn", b =>
                {
                    b.Property<int>("QBColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QBColumnId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("QueryBuilderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QBColumnId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("QueryBuilderId");

                    b.ToTable("QBColumns", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBCondition", b =>
                {
                    b.Property<int>("QBConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QBConditionId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("QueryBuilderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QBConditionId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("QueryBuilderId");

                    b.ToTable("QBConditions", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBJoinCondition", b =>
                {
                    b.Property<int>("QBJoinConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QBJoinConditionId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("QueryBuilderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QBJoinConditionId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("QueryBuilderId");

                    b.ToTable("QBJoinConditions", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBObject", b =>
                {
                    b.Property<int>("QBObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QBObjectId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("QueryBuilderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QBObjectId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("QueryBuilderId");

                    b.ToTable("QBObjects", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBParameter", b =>
                {
                    b.Property<int>("QBParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QBParameterId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("QueryBuilderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QBParameterId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("QueryBuilderId");

                    b.ToTable("QBParameters", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBSortOrder", b =>
                {
                    b.Property<int>("QBSortOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QBSortOrderId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("QueryBuilderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QBSortOrderId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("QueryBuilderId");

                    b.ToTable("QBSortOrders", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QueryBuilder", b =>
                {
                    b.Property<int>("QueryBuilderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QueryBuilderId"));

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<int>("GenericObjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QueryBuilderId");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("GenericObjectId");

                    b.ToTable("QueryBuilders", "dvp");
                });

            modelBuilder.Entity("Develop.Entities.DVP.Translation", b =>
                {
                    b.Property<int>("RefId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("RefKey")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .UseCollation("uk-UA-x-icu");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RefId", "LanguageId", "RefKey");

                    b.HasIndex("Deleted")
                        .HasFilter("\"Deleted\" IS NOT NULL");

                    b.HasIndex("LanguageId");

                    b.ToTable("Translations", "dvp");

                    b.HasData(
                        new
                        {
                            RefId = 1,
                            LanguageId = 2,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ід."
                        },
                        new
                        {
                            RefId = 2,
                            LanguageId = 2,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Проект"
                        },
                        new
                        {
                            RefId = 3,
                            LanguageId = 2,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Опис"
                        },
                        new
                        {
                            RefId = 1,
                            LanguageId = 1,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Id."
                        },
                        new
                        {
                            RefId = 2,
                            LanguageId = 1,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Project"
                        },
                        new
                        {
                            RefId = 3,
                            LanguageId = 1,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Description"
                        },
                        new
                        {
                            RefId = 8,
                            LanguageId = 2,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ід."
                        },
                        new
                        {
                            RefId = 9,
                            LanguageId = 2,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Застосунок"
                        },
                        new
                        {
                            RefId = 10,
                            LanguageId = 2,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Опис"
                        },
                        new
                        {
                            RefId = 8,
                            LanguageId = 1,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Id."
                        },
                        new
                        {
                            RefId = 9,
                            LanguageId = 1,
                            RefKey = "DataEntry",
                            Inserted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Application"
                        });
                });

            modelBuilder.Entity("AppFuncGroup", b =>
                {
                    b.HasOne("Develop.Entities.DVP.App", null)
                        .WithMany()
                        .HasForeignKey("AppsAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Develop.Entities.DVP.FuncGroup", null)
                        .WithMany()
                        .HasForeignKey("FuncGroupsFuncGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Develop.Entities.DVP.AOListener", b =>
                {
                    b.HasOne("Develop.Entities.DVP.GenericObject", "GenericObject")
                        .WithMany("AOListeners")
                        .HasForeignKey("GenericObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GenericObject");
                });

            modelBuilder.Entity("Develop.Entities.DVP.App", b =>
                {
                    b.HasOne("Develop.Entities.DVP.Project", "Project")
                        .WithMany("Apps")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Develop.Entities.DVP.AppObject", b =>
                {
                    b.HasOne("Develop.Entities.DVP.FuncGroup", "FuncGroup")
                        .WithMany("AppObjects")
                        .HasForeignKey("FuncGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FuncGroup");
                });

            modelBuilder.Entity("Develop.Entities.DVP.CDSCondition", b =>
                {
                    b.HasOne("Develop.Entities.DVP.CDSNode", "CDSNode")
                        .WithMany("CDSConditions")
                        .HasForeignKey("CDSNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CDSNode");
                });

            modelBuilder.Entity("Develop.Entities.DVP.CDSNode", b =>
                {
                    b.HasOne("Develop.Entities.DVP.GenericObject", "GenericObject")
                        .WithMany("CDSNodes")
                        .HasForeignKey("GenericObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Develop.Entities.DVP.CDSNode", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("GenericObject");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Develop.Entities.DVP.DataEntry", b =>
                {
                    b.HasOne("Develop.Entities.DVP.GenericObject", "GenericObject")
                        .WithMany("DataEntries")
                        .HasForeignKey("GenericObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GenericObject");
                });

            modelBuilder.Entity("Develop.Entities.DVP.DataEntryTranslation", b =>
                {
                    b.HasOne("Develop.Entities.DVP.DataEntry", "DataEntry")
                        .WithMany("DataEntryTranslations")
                        .HasForeignKey("DataEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Develop.Entities.DVP.Language", "Language")
                        .WithMany("DataEntryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DataEntry");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Develop.Entities.DVP.FuncGroup", b =>
                {
                    b.HasOne("Develop.Entities.DVP.Project", "Project")
                        .WithMany("FuncGroups")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Develop.Entities.DVP.GenericObject", b =>
                {
                    b.HasOne("Develop.Entities.DVP.AppObject", "AppObject")
                        .WithMany("GenericObjects")
                        .HasForeignKey("AppObjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Develop.Entities.DVP.FuncGroup", "FuncGroup")
                        .WithMany("GenericObjects")
                        .HasForeignKey("FuncGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppObject");

                    b.Navigation("FuncGroup");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBAggregation", b =>
                {
                    b.HasOne("Develop.Entities.DVP.QueryBuilder", "QueryBuilder")
                        .WithMany("QBAggregations")
                        .HasForeignKey("QueryBuilderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QueryBuilder");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBColumn", b =>
                {
                    b.HasOne("Develop.Entities.DVP.QueryBuilder", "QueryBuilder")
                        .WithMany("QBColumns")
                        .HasForeignKey("QueryBuilderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QueryBuilder");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBCondition", b =>
                {
                    b.HasOne("Develop.Entities.DVP.QueryBuilder", "QueryBuilder")
                        .WithMany("QBConditions")
                        .HasForeignKey("QueryBuilderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QueryBuilder");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBJoinCondition", b =>
                {
                    b.HasOne("Develop.Entities.DVP.QueryBuilder", "QueryBuilder")
                        .WithMany("QBJoinConditions")
                        .HasForeignKey("QueryBuilderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QueryBuilder");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBObject", b =>
                {
                    b.HasOne("Develop.Entities.DVP.QueryBuilder", "QueryBuilder")
                        .WithMany("QBObjects")
                        .HasForeignKey("QueryBuilderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QueryBuilder");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBParameter", b =>
                {
                    b.HasOne("Develop.Entities.DVP.QueryBuilder", "QueryBuilder")
                        .WithMany("QBParameters")
                        .HasForeignKey("QueryBuilderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QueryBuilder");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QBSortOrder", b =>
                {
                    b.HasOne("Develop.Entities.DVP.QueryBuilder", "QueryBuilder")
                        .WithMany("QBSortOrders")
                        .HasForeignKey("QueryBuilderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QueryBuilder");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QueryBuilder", b =>
                {
                    b.HasOne("Develop.Entities.DVP.GenericObject", "GenericObject")
                        .WithMany("QueryBuilders")
                        .HasForeignKey("GenericObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GenericObject");
                });

            modelBuilder.Entity("Develop.Entities.DVP.Translation", b =>
                {
                    b.HasOne("Develop.Entities.DVP.Language", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Develop.Entities.DVP.AppObject", b =>
                {
                    b.Navigation("GenericObjects");
                });

            modelBuilder.Entity("Develop.Entities.DVP.CDSNode", b =>
                {
                    b.Navigation("CDSConditions");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("Develop.Entities.DVP.DataEntry", b =>
                {
                    b.Navigation("DataEntryTranslations");
                });

            modelBuilder.Entity("Develop.Entities.DVP.FuncGroup", b =>
                {
                    b.Navigation("AppObjects");

                    b.Navigation("GenericObjects");
                });

            modelBuilder.Entity("Develop.Entities.DVP.GenericObject", b =>
                {
                    b.Navigation("AOListeners");

                    b.Navigation("CDSNodes");

                    b.Navigation("DataEntries");

                    b.Navigation("QueryBuilders");
                });

            modelBuilder.Entity("Develop.Entities.DVP.Language", b =>
                {
                    b.Navigation("DataEntryTranslations");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Develop.Entities.DVP.Project", b =>
                {
                    b.Navigation("Apps");

                    b.Navigation("FuncGroups");
                });

            modelBuilder.Entity("Develop.Entities.DVP.QueryBuilder", b =>
                {
                    b.Navigation("QBAggregations");

                    b.Navigation("QBColumns");

                    b.Navigation("QBConditions");

                    b.Navigation("QBJoinConditions");

                    b.Navigation("QBObjects");

                    b.Navigation("QBParameters");

                    b.Navigation("QBSortOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
